// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  schoolId      String?
  school        School?   @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  admin         Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id          String   @id @default(cuid())
  name        String
  players     Player[]
  users       User[]
  homeMatches Match[]  @relation("homeSchool")
  awayMatches Match[]  @relation("awaySchool")
  secretCode  String   @default(cuid())
}

model Player {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  schoolId   String
  school     School  @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  homeBoards Board[] @relation("homePlayer")
  awayBoards Board[] @relation("awayPlayer")
}

model Match {
  id           String   @id @default(cuid())
  date         DateTime
  published    Boolean  @default(false)
  homeSchoolId String
  homeSchool   School   @relation("homeSchool", fields: [homeSchoolId], references: [id], onDelete: Cascade)
  awaySchoolId String
  awaySchool   School   @relation("awaySchool", fields: [awaySchoolId], references: [id], onDelete: Cascade)
  boards       Board[]
}

model Board {
  id           String  @id @default(cuid())
  number       Int
  matchId      String
  match        Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  homePlayerId String?
  homePlayer   Player? @relation("homePlayer", fields: [homePlayerId], references: [id], onDelete: SetNull)
  awayPlayerId String?
  awayPlayer   Player? @relation("awayPlayer", fields: [awayPlayerId], references: [id], onDelete: SetNull)
  result       String  @default("") // home, away, or draw
}
